<?xml version="1.0" encoding="UTF-8"?>
<header name="config.hpp" root="..">
<synopsis>
	The <self/> header defines a configuration macro that determines whether
	the library enables support for variadics and placemarkers.
</synopsis>

<symbol id="VARIADICS">
	<abstract>
		The <VARIADICS/> macro is a configuration macro that determines whether
		the library enables support for variadics and placemarkers.
	</abstract>
	<usage>
		<syntax>#define <VARIADICS/> n</syntax>
		<param id="n" optional="true">An integral literal.</param>
	</usage>
	<para>
		If this macro is not defined by the user, the library defines it as
		<code>0</code> if the preprocessor is a C++ preprocessor or a C
		preprocessor prior to C99.
		The library defines this macro as <code>1</code> if the preprocessor
		is a C99 preprocessor.
	</para>
	<para>
		If this macro is defined by the user, the library redefines it
		as either <code>0</code> or <code>1</code>.
		If the macro is defined with an empty replacement list, as in
		<snippet>#define <VARIADICS/></snippet>
		or if the macro is defined as a non-zero integral literal, the library
		redefines the macro as <code>1</code>.
		If the macro is defined as zero (e.g. <code>0</code>, <code>0x0</code>,
		etc.), the library redefines the macro as <code>0</code>.
	</para>
	<para>
		This macro may be defined as any constant integral expression as long
		as the expression is wrapped in parentheses.
<snippet>
#define <VARIADICS/> 1 + 1   // unspecified
#define <VARIADICS/> (1 + 1) // okay
</snippet>
	</para>
	<para>
		If the user defines this macro, it must be defined prior to the
		inclusion of any library headers.
	</para>
<listing>
#define <VARIADICS/> 1

#include <config.hpp/>
#include <stringize.hpp/>

<STRINGIZE/>(std::pair&lt;int, int&gt;) // "std::pair&lt;int, int&gt;"
</listing>
</symbol>

</header>
