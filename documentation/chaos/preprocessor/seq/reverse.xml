<?xml version="1.0" encoding="UTF-8"?>
<header name="chaos/preprocessor/seq/reverse.h" author="Paul Mensonides" date="2003-2004">
<overview>
	The <self/> header defines a macro that reverses the elements in a <link id="sequence"/>.
</overview>

<macro id="SEQ_REVERSE" type="indirect" group="reversal">
	<abstract>
		The <SEQ_REVERSE/> macro reverses the elements in its argument.
	</abstract>
	<usage lang="C99">
		<syntax><SEQ_REVERSE/>(seq)</syntax>
		<param id="seq" optional="1">
			The <link id="sequence"/> whose elements are to be reversed.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><SEQ_REVERSE/>(seq)</syntax>
		<param id="seq">
			The <link id="sequence"/> whose elements are to be reversed.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="sequence"/> containing the elements of <var>seq</var> in reverse order.
	</para>
	<para>
		This macro uses <link id="sequential iteration"/>.
		As a result, the algorithm is theoretically capable of processing <link id="sequences"/> containing an <em>unrestricted</em> number of elements.
	</para>
	<listing>
		#include <chaos-preprocessor-config.h/>
		#include <chaos-preprocessor-seq-reverse.h/>
		
		<SEQ_REVERSE/>((a)(b)(c)) // (c)(b)(a)
		
		#if <VARIADICS/>
		
		<SEQ_REVERSE/>() //
		<SEQ_REVERSE/>((a, b)(c, d)(e, f)) // (e, f)(c, d)(a, b)
		
		#endif
	</listing>
	<derivative id="SEQ_REVERSE_ID"/>
	<derivative id="SEQ_REVERSE_" lang="C99"/>
</macro>

</header>
