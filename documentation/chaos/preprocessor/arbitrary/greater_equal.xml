<?xml version="1.0" encoding="UTF-8"?>
<header name="chaos/preprocessor/arbitrary/greater_equal.h" author="Paul Mensonides" date="2003-2004">
<overview>
	The <self/> header defines an <link id="arbitrary-precision"/> "greater-than-or-equal" operator.
</overview>

<macro id="GREATER_EQUAL_AP" group="greater-equal">
	<abstract>
		The <GREATER_EQUAL_AP/> macro tests whether its first operand is greater than or equal to its second operand.
	</abstract>
	<usage lang="C99">
		<syntax><GREATER_EQUAL_AP/>(x, y)</syntax>
		<param id="x">
			The first operand.
		</param>
		<param id="y">
			The second operand.
		</param>
	</usage>
	<para>
		If <var>x</var> is greater than or equal to <var>y</var>, this macro expands to <code>1</code>.
		Otherwise, it expands to <code>0</code>.
	</para>
	<para>
		This macro is a <link id="second-tier"/> algorithm that deduces the current <link id="recursion state"/> and invokes <GREATER_EQUAL_AP_S/>.
		If the current <link id="recursion state"/> is already known, direct use of <GREATER_EQUAL_AP_S/> is more efficient.
	</para>
	<para>
		This macro may not be used if <link id="bypass semantics"/> are in effect.
	</para>
	<listing>
		#include <chaos-preprocessor-arbitrary-greater_equal.h/>
		#include <chaos-preprocessor-arbitrary-literal.h/>
		#include <chaos-preprocessor-config.h/>
		
		#if <VARIADICS/>
		
		<GREATER_EQUAL_AP/>((1)(2)(3), (4)(5)) // 1
		<GREATER_EQUAL_AP/>((1)(2), (3)(4)(5)) // 0
		
		<GREATER_EQUAL_AP/>(
		    <LITERAL_AP/>((-)1), <LITERAL_AP/>((-)1)
		)
		// 1
		
		#endif
	</listing>
	<derivative id="GREATER_EQUAL_AP_ID" lang="C99"/>
	<derivative id="GREATER_EQUAL_AP_" lang="C99"/>
	<derivative id="GREATER_EQUAL_AP_S">
		<usage lang="C99">
			<syntax><GREATER_EQUAL_AP_S/>(s, x, y)</syntax>
		</usage>
		<derivative id="GREATER_EQUAL_AP_S_ID" lang="C99"/>
		<derivative id="GREATER_EQUAL_AP_S_" lang="C99"/>
	</derivative>
</macro>

</header>
