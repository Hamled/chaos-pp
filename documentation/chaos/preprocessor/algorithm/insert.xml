<?xml version="1.0" encoding="UTF-8"?>
<header name="chaos/preprocessor/algorithm/insert.h" author="Paul Mensonides" date="2003-2004">
<overview>
	The <self/> header defines an algorithm that inserts an element into a <link id="generic data structure"/>.
</overview>

<macro id="INSERT" type="indirect" group="insertion">
	<abstract>
		The <INSERT/> macro inserts its third argument into its second argument before the index specified by its first argument.
	</abstract>
	<usage lang="C99">
		<syntax><INSERT/>(i, g, ...)</syntax>
		<param id="i">
			The position at which the element is to be inserted.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="g">
			The <link id="generic data structure"/> into which the element is to be inserted.
		</param>
		<param id="..." optional="1">
			The element to be inserted.
		</param>
	</usage>
	<usage lang="C/C++">
		<syntax><INSERT/>(i, g, x)</syntax>
		<param id="i">
			The position at which the element is to be inserted.
		</param>
		<param id="g">
			The <link id="generic data structure"/> into which the element is to be inserted.
		</param>
		<param id="x">
			The element to be inserted.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="generic data structure"/> of the same type as <var>g</var> with the elements of <var>g</var> with <var>x</var> (or <code>__VA_ARGS__</code>) inserted at position <var>i</var>.
		Consequently, <var>g</var> must contain at least <var>i</var> elements.
	</para>
	<para>
		The running time of <INSERT/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Î˜(<x-var>n</x-var>+1), where <x-var>n</x-var> is <var>i</var>.
	</para>
	<para>
		Note that, in C99, this algorithm makes no attempt to verify that <code>__VA_ARGS__</code> <em>can</em> be inserted into <var>g</var>.
		Thus it is possible to produce invalid data structures.
		For example,
		<snippet><INSERT/>(0, (<STRING/>) a b c, +) // invalid</snippet>
		The above results in
		<snippet>(<STRING/>) + a b c</snippet>
		which is an invalid <link id="string"/>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <INSERT_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-insert.h/>
		#include <chaos-preprocessor-string-spec.h/>
		
		<INSERT/>(2, (<STRING/>) a b c, _)
		// (<STRING/>) a b _ c
	</listing>
	<derivative id="INSERT_ID"/>
	<derivative id="INSERT_" lang="C99"/>
	<derivative id="INSERT_BYPASS">
		<usage lang="C99">
			<syntax><INSERT_BYPASS/>(s, i, g, ...)</syntax>
		</usage>
		<usage lang="C/C++">
			<syntax><INSERT_BYPASS/>(s, i, g, x)</syntax>
		</usage>
		<derivative id="INSERT_BYPASS_ID"/>
		<derivative id="INSERT_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
