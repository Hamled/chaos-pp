<?xml version="1.0" encoding="UTF-8"?>
<header name="chaos/preprocessor/algorithm/elem.h" author="Paul Mensonides" date="2003-2004">
<overview>
	The <self/> header defines an algorithm that extracts an element from a <link id="generic data structure"/>
</overview>

<macro id="ELEM" type="indirect" group="element-access">
	<abstract>
		The <ELEM/> macro extracts an element from a <link id="generic data structure"/>.
	</abstract>
	<usage>
		<syntax><ELEM/>(i, g)</syntax>
		<param id="i">
			The zero-based index of the element to be extracted.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="g">
			The <link id="generic data structure"/> from which an element is to be extracted.
		</param>
	</usage>
	<para>
		This macro extracts the <var>i</var>-th element of <var>g</var>.
		Consequently, <var>g</var> must contain at least <var>i</var> + 1 elements.
	</para>
	<para>
		The running time of <ELEM/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Î˜(<x-var>n</x-var>+1), where <x-var>n</x-var> is <var>i</var>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <ELEM_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-elem.h/>
		#include <chaos-preprocessor-seq-spec.h/>
		
		#define DATA (<SEQ/>) (a)(b)(c)
		
		<ELEM/>(0, DATA) // a
		<ELEM/>(2, DATA) // c
	</listing>
	<derivative id="ELEM_ID"/>
	<derivative id="ELEM_" lang="C99"/>
	<derivative id="ELEM_BYPASS">
		<usage>
			<syntax><ELEM_BYPASS/>(s, i, g)</syntax>
		</usage>
		<derivative id="ELEM_BYPASS_ID"/>
		<derivative id="ELEM_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
