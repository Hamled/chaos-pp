<?xml version="1.0" encoding="UTF-8"?>
<header name="chaos/preprocessor/algorithm/first_n.h" author="Paul Mensonides" date="2003-2004">
<overview>
	The <self/> header defines an algorithm that extracts a user-specified number of elements from the beginning of a <link id="generic data structure"/>.
</overview>

<macro id="FIRST_N" type="indirect" group="range">
	<abstract>
		The <FIRST_N/> macro extracts the number of elements specified by its first argument from its second argument.
	</abstract>
	<usage>
		<syntax><FIRST_N/>(n, g)</syntax>
		<param id="n">
			The number of elements to be extracted.
			Valid values range from <code>0</code> to <LIMIT_MAG/>.
		</param>
		<param id="g">
			The <link id="generic data structure"/> from which elements are to be extracted.
		</param>
	</usage>
	<para>
		This macro expands to a <link id="generic data structure"/> of the same type as <var>g</var> containing the first <var>n</var> elements of <var>g</var>.
		Consequently, <var>g</var> must contain at least <var>n</var> elements.
	</para>
	<para>
		The efficiency of the algorithm's use of the <link id="recursion backend"/> can be described in terms of the number of <link id="recursion steps"/> required to complete the algorithm.
		The asymptotic upper and lower bounds are Î˜(<x-var>n</x-var>+1), where <x-var>n</x-var> is the argument <code>n</code>.
	</para>
	<para>
		This macro uses <link id="bypass semantics"/>.
		If <link id="bypass semantics"/> are already in effect, <FIRST_N_BYPASS/> must be used instead.
	</para>
	<listing>
		#include <chaos-preprocessor-algorithm-first_n.h/>
		#include <chaos-preprocessor-array-core.h/>
		
		<FIRST_N/>(2, (<ARRAY/>) (5, (a, b, c, d, e)))
		// (<ARRAY/>) (2, (a, b))
	</listing>
	<derivative id="FIRST_N_ID"/>
	<derivative id="FIRST_N_" lang="C99"/>
	<derivative id="FIRST_N_BYPASS">
		<usage>
			<syntax><FIRST_N_BYPASS/>(s, n, g)</syntax>
		</usage>
		<derivative id="FIRST_N_BYPASS_ID"/>
		<derivative id="FIRST_N_BYPASS_" lang="C99"/>
	</derivative>
</macro>

</header>
