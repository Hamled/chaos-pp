<?xml version="1.0" encoding="UTF-8"?>
<header name="stringize.h" root="..">
<abstract>
	The <self/> header defines stringizing macros.
</abstract>

<macro id="STRINGIZE">
	<derivative id="STRINGIZE_ID"/>
	<derivative id="STRINGIZE_" lang="C99"/>
	<abstract>
		The <STRINGIZE/> macro stringizes its argument after it has been expanded.
	</abstract>
	<usage lang="C99">
		<syntax><STRINGIZE/>(...)</syntax>
		<param id="..." optional="1">The argument to be stringized.</param>
	</usage>
	<usage lang="C/C++">
		<syntax><STRINGIZE/>(x)</syntax>
		<param id="x">The argument to be stringized.</param>
	</usage>
	<para>
		This macro stringizes its argument with the stringizing operator.
<snippet>
#__VA_ARGS__ // C99
#x           // C and C++
</snippet>
	</para>
	<para>
		This macro allows its argument to expand on input.
		This macro's sibling, <PRIMITIVE_STRINGIZE/>, does <em>not</em> provide this delay.
	</para>
<listing>
#include <stringize.h/>

#define A text

<STRINGIZE/>(A) // "text"
</listing>
</macro>

<macro id="PRIMITIVE_STRINGIZE">
	<derivative id="PRIMITIVE_STRINGIZE_ID"/>
	<derivative id="PRIMITIVE_STRINGIZE_" lang="C99"/>
	<abstract>
		The <PRIMITIVE_STRINGIZE/> macro stringizes is argument it is expanded.
	</abstract>
	<usage lang="C99">
		<syntax><PRIMITIVE_STRINGIZE/>(...)</syntax>
		<param id="..." optional="1">The argument to be stringized.</param>
	</usage>
	<usage lang="C/C++">
		<syntax><PRIMITIVE_STRINGIZE/>(x)</syntax>
		<param id="x">The argument to be stringized.</param>
	</usage>
	<para>
		This macro behaves identically to <STRINGIZE/> except that it <em>does not</em>
		allow its argument to expand before it is stringized.
	</para>
<listing>
#include <stringize.h/>

#define A text

<PRIMITIVE_STRINGIZE/>(A) // "A"
</listing>
</macro>

</header>
